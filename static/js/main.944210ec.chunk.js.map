{"version":3,"sources":["components/nav.jsx","components/input.jsx","components/habit.jsx","components/habits.jsx","reportWebVitals.js","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Nav","count","this","props","totalCount","className","PureComponent","Input","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","name","current","value","onAdd","reset","type","placeholder","Habit","onIncrement","habit","onDecrement","onDelete","console","log","onClick","Habits","habits","map","id","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SimpleHabit","useState","setCount","spanRef","useRef","handleIncrement","useCallback","handleDecrement","handleDelete","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.944210ec.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Nav extends PureComponent {\n    render() {\n        const count = this.props.totalCount;\n        return (\n            <header className=\"nav-contanier\">\n                <i className=\"nav-icon fas fa-leaf\"></i>\n                <span className=\"nav-title\">Habit Tracker</span>\n                <span className=\"nav-count\">{count}</span>\n            </header>\n        );\n    }\n}\n\nexport default Nav;\n","import React, { memo } from \"react\";\n\n//function\n//class에 PureComponent가 있다면 fucntion에는 memo가 있다.\nconst Input = memo((props) => {\n    const formRef = React.createRef();\n    const inputRef = React.createRef();\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const name = inputRef.current.value;\n        name && props.onAdd(name);\n        //이렇게 해도 됨\n        formRef.current.reset();\n    };\n\n    return (\n        <form className=\"add-form\" ref={formRef} onSubmit={onSubmit}>\n            <input\n                ref={inputRef}\n                type=\"text\"\n                className=\"add-input\"\n                placeholder=\"Habit\"\n            ></input>\n            <button className=\"add-button\">add</button>\n        </form>\n    );\n});\n\nexport default Input;\n\n//// class form\n// class Input extends PureComponent {\n//     inputRef = React.createRef();\n\n//     onSubmit = (event) => {\n//         event.preventDefault();\n//         const name = this.inputRef.current.value;\n//         name && this.props.onAdd(name);\n//         this.inputRef.current.value = \"\";\n//     };\n\n//     render() {\n//         console.log(\"Input\");\n//         return (\n//             <form className=\"add-form\" onSubmit={this.onSubmit}>\n//                 <input\n//                     ref={this.inputRef}\n//                     type=\"text\"\n//                     className=\"add-input\"\n//                     placeholder=\"Habit\"\n//                 ></input>\n//                 <button className=\"add-button\">add</button>\n//             </form>\n//         );\n//     }\n// }\n\n// export default Input;\n","import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n    //lift cycle method\n    //말그대로 ui상에서 보였을때\n    componentDidMount() {\n        console.log(`${this.props.habit.name} componentDidMount`);\n    }\n    //ui상에서 보이지 않아질때\n    componentWillUnmount() {\n        console.log(`${this.props.habit.name} componentWillUnmount`);\n    }\n\n    onIncrement = () => {\n        this.props.onIncrement(this.props.habit);\n    };\n\n    onDecrement = () => {\n        this.props.onDecrement(this.props.habit);\n    };\n\n    onDelete = () => {\n        this.props.onDelete(this.props.habit);\n    };\n\n    render() {\n        const { name, count } = this.props.habit;\n\n        return (\n            <li className=\"habit\">\n                <span className=\"habit-name\">{name}</span>\n                <span className=\"habit-count\">{count}</span>\n                <button\n                    className=\"habit-button habit-increase\"\n                    onClick={this.onIncrement}\n                >\n                    <i className=\"fas fa-plus-square\"></i>\n                </button>\n                <button\n                    className=\"habit-button habit-decrease\"\n                    onClick={this.onDecrement}\n                >\n                    <i className=\"fas fa-minus-square\"></i>\n                </button>\n                <button\n                    className=\"habit-button habit-delete\"\n                    onClick={this.onDelete}\n                >\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n            </li>\n        );\n    }\n}\n\nexport default Habit;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\n\nclass Habits extends Component {\n    render() {\n        const habits = this.props.habits;\n        return (\n            <ul>\n                {habits.map((habit) => (\n                    <Habit\n                        key={habit.id}\n                        habit={habit}\n                        onIncrement={this.props.onIncrement}\n                        onDecrement={this.props.onDecrement}\n                        onDelete={this.props.onDelete}\n                    />\n                ))}\n            </ul>\n        );\n    }\n}\n\nexport default Habits;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import \"./app.css\";\nimport Nav from \"./components/nav\";\nimport Input from \"./components/input\";\nimport Habits from \"./components/habits\";\nimport { Component } from \"react\";\n\nclass App extends Component {\n    state = {\n        habits: [\n            { id: 1, name: \"Reading\", count: 0 },\n            { id: 2, name: \"Runing\", count: 0 },\n            { id: 3, name: \"Coding\", count: 0 },\n        ],\n    };\n\n    handleReset = () => {\n        const habits = this.state.habits.map((item) => {\n            if (item.count !== 0) {\n                return { ...item, count: 0 };\n            }\n            return item;\n        });\n\n        this.setState({ habits });\n    };\n\n    //#region input\n    handleAdd = (name) => {\n        //여기서 inputVal에 저장된 값으로 habit 생성, input 초기화\n        const habits = [...this.state.habits];\n        const newHabit = {\n            id: Date.now(),\n            name: name,\n            count: 0,\n        };\n        habits.push(newHabit);\n        this.setState({ habits });\n    };\n    //#endregion\n\n    //#region Habits\n    handleIncrement = (habit) => {\n        // //... sprite operator 아이템을 하나하나씩 넣는것\n        // const habits = [...this.state.habits];\n        // const index = habits.indexOf(habit);\n        // habits[index].count++;\n        // //동일한 이름일때는 하나만써도 괜춘\n\n        //pure component를 쓸 경우\n        //increase되는 count값을 아예 레퍼런스를 교체함으로서 re-render가 가능하게 한다.\n        const habits = this.state.habits.map((item) => {\n            if (item.id === habit.id) {\n                return { ...habit, count: habit.count + 1 };\n            }\n            return item;\n        });\n        this.setState({ habits });\n    };\n\n    handleDecrement = (habit) => {\n        // //... sprite operator 아이템을 하나하나씩 넣는것\n        // const habits = [...this.state.habits];\n        // const index = habits.indexOf(habit);\n        // const dv = habits[index].count - 1 < 0 ? 0 : -1;\n        // habits[index].count += dv;\n\n        //pure component를 쓸 경우\n        //increase되는 count값을 아예 레퍼런스를 교체함으로서 re-render가 가능하게 한다.\n        const habits = this.state.habits.map((item) => {\n            if (item.id === habit.id) {\n                return {\n                    ...habit,\n                    count: habit.count - 1 < 0 ? habit.count : habit.count - 1,\n                };\n            }\n            return item;\n        });\n        this.setState({ habits });\n    };\n\n    handleDelete = (habit) => {\n        //... sprite operator 아이템을 하나하나씩 넣는것\n        const habits = this.state.habits.filter((item) => item.id !== habit.id);\n        this.setState({ habits });\n    };\n    //#endregion\n\n    render() {\n        return (\n            <>\n                <Nav\n                    totalCount={\n                        this.state.habits.filter((item) => item.count > 0)\n                            .length\n                    }\n                />\n                <Input onAdd={this.handleAdd} />\n                <Habits\n                    habits={this.state.habits}\n                    onIncrement={this.handleIncrement}\n                    onDecrement={this.handleDecrement}\n                    onDelete={this.handleDelete}\n                />\n                <button className=\"resetBtn\" onClick={this.handleReset}>\n                    reset all\n                </button>\n            </>\n        );\n    }\n}\nexport default App;\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nconst SimpleHabit = (props) => {\n    //실제 state값, 업데이트 할 수 있는 함수\n    //use 키워드\n    //리액트가 알아서 자동으로 기억함\n    //그래서 반복되서 코드블럭이 호출이 되어도 괜춘\n    const [count, setCount] = useState(0);\n    const spanRef = useRef();\n\n    const handleIncrement = useCallback(() => {\n        setCount(count + 1);\n    });\n\n    const handleDecrement = useCallback(() => {\n        setCount(count - 1 < 0 ? count : count - 1);\n    });\n\n    const handleDelete = useCallback(() => {\n        console.log(\"handleDelete\");\n    });\n\n    //count가 변경이 될때마다 호출\n    //didmount, willumount 합친것\n    //[] 비었으면 처음만 호출\n    useEffect(() => {\n        console.log(`mouted & updated!: ${count}`);\n    }, [count]);\n\n    return (\n        <li className=\"habit\">\n            <span ref={spanRef} className=\"habit-name\">\n                Reading\n            </span>\n            <span className=\"habit-count\">{count}</span>\n            <button\n                className=\"habit-button habit-increase\"\n                onClick={handleIncrement}\n            >\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <button\n                className=\"habit-button habit-decrease\"\n                onClick={handleDecrement}\n            >\n                <i className=\"fas fa-minus-square\"></i>\n            </button>\n            <button\n                className=\"habit-button habit-delete\"\n                onClick={handleDelete}\n            >\n                <i className=\"fas fa-trash\"></i>\n            </button>\n        </li>\n    );\n};\n\nexport default SimpleHabit;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\n\nimport SimpleHabit from \"./components/simpleHabit\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <SimpleHabit />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}